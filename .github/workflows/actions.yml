# This workflow will build a package using Maven and then publish it to GitHub packages and Docker registry when a release is created

name: Maven Package

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
    # Only run if the commit message does NOT contain [skip ci]
    # This requires a condition in jobs (see below)
  release:
    types: [created]

jobs:
  bump-version:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Get current and previous versions
        id: get_versions
        run: |
          CURRENT_VERSION=$(xmlstarlet sel -t -v "/*[local-name()='project']/*[local-name()='version']" pom.xml)
          PREV_VERSION=$(git show HEAD~1:pom.xml | xmlstarlet sel -t -v "/*[local-name()='project']/*[local-name()='version']")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "prev=$PREV_VERSION" >> $GITHUB_OUTPUT

      - name: Check if major version changed
        id: check_major
        run: |
          CUR_MAJOR=$(echo "${{ steps.get_versions.outputs.current }}" | cut -d. -f1)
          PREV_MAJOR=$(echo "${{ steps.get_versions.outputs.prev }}" | cut -d. -f1)
          if [ "$CUR_MAJOR" = "$PREV_MAJOR" ]; then
            echo "bump_minor=true" >> $GITHUB_OUTPUT
          else
            echo "bump_minor=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump minor version
        if: steps.check_major.outputs.bump_minor == 'true'
        run: |
          CUR_VERSION="${{ steps.get_versions.outputs.current }}"
          MAJOR=$(echo "$CUR_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CUR_VERSION" | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
          xmlstarlet ed --inplace -u "/*[local-name()='project']/*[local-name()='version']" -v "$NEW_VERSION" pom.xml
          echo "Bumped version: $CUR_VERSION -> $NEW_VERSION"

      - name: Commit and push updated pom.xml
        if: steps.check_major.outputs.bump_minor == 'true'
        run: |
          git add pom.xml
          git commit -m "chore: bump minor version in pom.xml [skip ci]"
          git push
          
  build:
    runs-on: ubuntu-latest
    needs: bump-version
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Pull latest bumped commit
      run: |
        git fetch origin master
        git reset --hard origin/master
    - name: Set up Maven settings.xml
      run: |
        mkdir -p $HOME/.m2
        cat > $HOME/.m2/settings.xml <<EOF
        <settings>
          <servers>
            <server>
              <id>git-maven</id>
              <username>${{ github.actor }}</username>
              <password>${{ secrets.GITHUB_TOKEN }}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $HOME/.m2/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract artifact name and version from pom.xml
      id: artifact
      run: |
        ARTIFACT_ID=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
        VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Log in to Docker registry for base image
      uses: docker/login-action@v3
      with:
        registry: repo.flowable.com/docker/flowable/flowable-work
        username: ${{ secrets.DOCKER_PULL_USERNAME }}
        password: ${{ secrets.DOCKER_PULL_PASSWORD }}
        
    - name: Build Docker image
      run: |
        docker build \
          --build-arg JAR_FILE=target/${{ steps.artifact.outputs.artifact_id }}-${{ steps.artifact.outputs.version }}.jar \
          -t ghcr.io/${{ github.repository_owner }}/flowable-models-public:${{ steps.artifact.outputs.version }} \
          -t ghcr.io/${{ github.repository_owner }}/flowable-models-public:latest \
          .

    - name: Push Docker image (version tag)
      run: docker push ghcr.io/${{ github.repository_owner }}/flowable-models-public:${{ steps.artifact.outputs.version }}

    - name: Push Docker image (latest tag)
      run: docker push ghcr.io/${{ github.repository_owner }}/flowable-models-public:latest

  deploy:
    name: Deploy via Helm
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout deployment chart
        uses: actions/checkout@v4
        with:
          repository: abretz-mimacom/flowable-deploy-template
          path: flowable-deploy-template
      
      - name: bump values.yaml
        run: |
          # 1. Create new branch from dev
          cd flowable-deploy-template
          git fetch origin dev
          git checkout -b "release/${{ github.event.release.tag_name }}" origin/dev

          # 2. Update flowable.work.image.tag in all helm/*/values.yaml
          find helm -type f -name values.yaml | while read file; do
            yq e '.flowable.work.image.tag = "${{ github.event.release.tag_name }}"' -i "$file"
          done

          # 3. Commit and push changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add helm/*/values.yaml
          git commit -m "chore: update flowable.work.image.tag to ${{ github.event.release.tag_name }}"
          git push origin "release/${{ github.event.release.tag_name }}"
