{
  "config" : {
    "scriptInfo" : {
      "script" : "import com.flowable.platform.service.task.TasksIndexQueryRequest;\nimport com.flowable.core.common.api.security.SecurityScope;\nimport com.flowable.core.spring.security.SecurityUtils;\nimport com.flowable.idm.engine.impl.util.UserUtil;\nimport com.flowable.platform.common.identitylink.PlatformIdentityLinkType;\nimport org.flowable.common.engine.api.FlowableIllegalArgumentException;\nimport org.flowable.identitylink.api.IdentityLink;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.apache.commons.lang3.StringUtils;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\nString PRIORITIZED_TASKS_QUERY = \"unassigned-assignable-tasks\"; //Custom query definition with custom sort field\nString ID_POSTFIX = \"@eagle.usaa.com\"; // postfix to convert eagle ID to login id\nString OWNER = \"owner\";\n\n// Get userid and groups to add to the query\nSecurityScope securityScope = SecurityUtils.getCurrentUserSecurityScope();\nString userId = securityScope.getUserId(); // saves us passing in the userid\nString managerId = null;\nString managerFull = null;\n\n// Get the user's manager ID from userInfo\n// Sample format of manager string\n// CN=White\\, Kevin (PLQ6047),OU=USERS,OU=IT,OU=COSAs,DC=eagle,DC=usaa,DC=com\n\ndef platformUser = platformIdentityService.createPlatformUserQuery()\n                      .userId(userId)\n                      .includeIdentityInfo()\n                      .singleResult();\nmanagerFull = UserUtil.findUserInfo(\"manager\", platformUser);\n\nif(managerFull != null){\n  managerId = StringUtils.substringBetween(managerFull, \"(\", \")\");\n  managerId +=ID_POSTFIX; // Add the email portion to match login id\n}\n\nMap<String, Object> params = new HashMap<String, Object>();\nparams.put(\"sort\", \"taskDueDateWithoutTime,priority,dueDate\");\nparams.put(\"order\", \"asc,desc,asc\");\nparams.put(\"ignoreTaskAssignableTime\", flw.getInput(\"ignoreTaskAssignableTime\"));\n\n// Setup the request to query all unassigned tasks\n\nTasksIndexQueryRequest taskRequest = new TasksIndexQueryRequest()\ntaskRequest.setCompleted(false);\ntaskRequest.setQueryName(PRIORITIZED_TASKS_QUERY);\ntaskRequest.setQueryParams(params);\ntaskRequest.setSort(\"taskDueDateWithoutTime,priority,dueDate\");\ntaskRequest.setOrder(\"asc,desc,asc\");\ntaskRequest.setSize(1); //Just get the highest priority task\n\ndef page = workIndexService.findTasksWithQuery(taskRequest);\n\n// Get The Task\nif(page.getTotal() > 0){\n    def pageData = page.getData();\n    def theTaskId = pageData.get(0).getId();\n    // Claim the task\n     taskService.claim(theTaskId, userId);\n    //taskService.addUserIdentityLink(theTaskId, managerId, PlatformIdentityLinkType.OWNER);\n\n     usaaIdentityLinkManager.propagateIdentityLink(theTaskId, userId, PlatformIdentityLinkType.PARTICIPANT);\n\n\n  if(managerId!=null){\n    List<IdentityLink> listOfTaskIdentityLink = taskService.getIdentityLinksForTask(theTaskId);\n    boolean taskOwnerExists = listOfTaskIdentityLink.stream().anyMatch(link->link.getType().equalsIgnoreCase(PlatformIdentityLinkType.OWNER));\n    if(!taskOwnerExists) {\n   \t\ttaskService.addUserIdentityLink(theTaskId, managerId, PlatformIdentityLinkType.OWNER);\n    }\n    usaaIdentityLinkManager.propagateIdentityLink(theTaskId, managerId, PlatformIdentityLinkType.PARTICIPANT);\n  }\n      flw.setOutput(\"theTaskId\", theTaskId);\n} else {\n    flw.setOutput(\"theTaskId\", null);\n\n    LocalDateTime localDate = LocalDateTime.now();\n    DateTimeFormatter dateformatter= DateTimeFormatter.ofPattern(\"HHmmss\");\n    // this exception will prevent the auto navigation to next task\n    //throw new FlowableIllegalArgumentException(\"No Tasks Available to Assign (\" + dateformatter.format(localDate) + \")\");\n}\n\n\n//flw.setOutput(\"managerFull\", managerFull);\n//flw.setOutput(\"managerId\", managerId);\n//flw.setOutput(\"userId\", userId);",
      "language" : "groovy"
    }
  },
  "ignoreConfirmationMessage" : true,
  "botKey" : "platform-script-evaluation-bot",
  "name" : "CLAC-A-001 Get Next available Task",
  "key" : "cLACA001GetNextAvailableTask"
}